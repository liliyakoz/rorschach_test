# -*- coding: utf-8 -*-
"""
Streamlit Web App ‚Äî Rorschach Test (–ù–µ–π—Ä–æ—Å–µ—Ç—å + –ë–∞–π–µ—Å + –ê–Ω–∫–µ—Ç–∞ + –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)
–ó–∞–ø—É—Å–∫:
    streamlit run rorschach_web.py
"""

import os
import csv
import joblib
import numpy as np
import streamlit as st
from tensorflow.keras.models import load_model
import time

# –ü—É—Ç–∏
RESULTS_CSV = "results.csv"
CARDS_DIR = "cards"
TOTAL_SLIDES = 10

# -----------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
# -----------------------------
@st.cache_resource
def load_models():
    nn_model = load_model("nn_animal_model.h5")
    nn_vec = joblib.load("nn_vectorizer.pkl")
    bayes_model = joblib.load("bayes_model.pkl")
    bayes_vec = joblib.load("bayes_vectorizer.pkl")
    return nn_model, nn_vec, bayes_model, bayes_vec

nn_model, nn_vec, bayes_model, bayes_vec = load_models()

# -----------------------------
# –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
# -----------------------------
def predict_is_animal(text: str):
    x_input = nn_vec.transform([text]).toarray()
    pred = nn_model.predict(x_input, verbose=0)[0][0]
    is_animal = int(pred > 0.5)
    return is_animal, float(pred)

def predict_popular(text: str):
    x_bayes = bayes_vec.transform([text])
    label = bayes_model.predict(x_bayes)[0]
    conf = float(np.max(bayes_model.predict_proba(x_bayes)))
    if conf < 0.5:
        label = "other"
    return label, conf

# -----------------------------
# CSV
# -----------------------------
def ensure_results_csv(path: str):
    if not os.path.exists(path):
        with open(path, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow([
                "username","slide","text",
                "is_animal","animal_conf",
                "popular_label","popular_confidence",
                "localization","movement","color_choice","form_clear"
            ])

ensure_results_csv(RESULTS_CSV)

# -----------------------------
# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
# -----------------------------
def get_diagnosis(scores):
    scoreA = scores["animals"]
    scoreM = scores["movement"]
    scoreC = scores["color"]
    scoreF = scores["form"]

    if scoreA > 30 and scoreM < 10 and scoreC < 20 and scoreF > 70:
        return "–ó–¥–æ—Ä–æ–≤—ã–π —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π"
    elif scoreM > 40 and scoreC > 50:
        return "–®–∏–∑–æ—Ñ—Ä–µ–Ω–∏—è"
    elif scoreC > 60 and scoreF < 50:
        return "–ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–π –¥–µ–ª–∏—Ä–∏–π"
    elif scoreA < 20 and scoreF < 40:
        return "–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –º–æ–∑–≥–∞"
    else:
        return "–î–∏–∞–≥–Ω–æ–∑ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"

def update_scores(is_animal, movement, color_choice, form_clear):
    st.session_state.answers["total"] += 1
    if is_animal:
        st.session_state.answers["animals"] += 1
    if movement:
        st.session_state.answers["movement"] += 1
    # –î–ª—è color_choice: —É—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ "—Ü–≤–µ—Ç –≤–∞–∂–µ–Ω", –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã 2 –∏–ª–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç
    if color_choice in ["–í–∞–∂–Ω–µ–µ —Ü–≤–µ—Ç, —Ñ–æ—Ä–º–∞ –≤—Ç–æ—Ä–∏—á–Ω–∞", "–í–∞–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç"]:
        st.session_state.answers["color"] += 1
    if form_clear:
        st.session_state.answers["form"] += 1

def calc_percentages():
    total = st.session_state.answers["total"]
    if total == 0:
        return {k: 0 for k in st.session_state.answers}
    return {
        k: (v / total) * 100 if k != "total" else v
        for k, v in st.session_state.answers.items()
    }

# -----------------------------
# Streamlit UI
# -----------------------------
st.set_page_config("Rorschach Test", layout="centered")
st.title("–¢–µ—Å—Ç –†–æ—Ä—à–∞—Ö–∞ (Web)")

# –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if "username" not in st.session_state:
    st.session_state.username = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", value="anonymous")

# –°–ª–∞–π–¥
if "slide" not in st.session_state:
    st.session_state.slide = 1

# –°—á—ë—Ç—á–∏–∫–∏
if "answers" not in st.session_state:
    st.session_state.answers = {
        "total": 0,
        "animals": 0,
        "movement": 0,
        "color": 0,
        "form": 0,
    }

slide = st.session_state.slide
st.subheader(f"–ö–∞—Ä—Ç–æ—á–∫–∞ {slide} –∏–∑ {TOTAL_SLIDES}")

# –ü–æ–∫–∞–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
img_path = os.path.join(CARDS_DIR, f"{slide}.jpg")
if os.path.exists(img_path):
    st.image(img_path, caption=f"–ö–∞—Ä—Ç–æ—á–∫–∞ {slide}", use_container_width=True)
else:
    st.warning(f"–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_path}")

# –í–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞
text = st.text_area("–ß—Ç–æ –≤—ã –≤–∏–¥–∏—Ç–µ?", "")

# –í–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ)
form_clear = st.radio("–£–≤–∏–¥–µ–Ω–Ω–æ–µ –∏–º–µ–µ—Ç —á—ë—Ç–∫—É—é —Ñ–æ—Ä–º—É?", ["–î–∞", "–ù–µ—Ç"]) == "–î–∞"
movement = st.radio("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–≤–∏–∂–µ—Ç—Å—è –∏–ª–∏ –∏—Å–∫–∞–∂–∞–µ—Ç—Å—è?", ["–î–∞", "–ù–µ—Ç"]) == "–î–∞"

localization = st.radio(
    "–í –∫–∞–∫–æ–π —á–∞—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã –í—ã —É–≤–∏–¥–µ–ª–∏ –æ–±—Ä–∞–∑?",
    [
        "–í—Å—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –±–æ–ª—å—à–∞—è –µ–≥–æ —á–∞—Å—Ç—å",
        "–ß–∞—Å—Ç—å –±–æ–ª—å—à–æ–≥–æ –ø—è—Ç–Ω–∞",
        "–û—Ç–¥–µ–ª—å–Ω—ã–µ –ø—è—Ç–Ω–∞ –∏–ª–∏ –º–µ–ª–∫–∏–µ –¥–µ—Ç–∞–ª–∏",
        "–ë–µ–ª—ã–π —Ñ–æ–Ω",
        "–î—Ä—É–≥–æ–µ"
    ]
)

color_choice = st.radio(
    "–ù–∞ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–≤–ª–∏—è–ª–∏ —Ü–≤–µ—Ç –∏–ª–∏ —Ñ–æ—Ä–º–∞?",
    [
        "–í–∞–∂–Ω–µ–µ —Ñ–æ—Ä–º–∞, —Ü–≤–µ—Ç –≤—Ç–æ—Ä–∏—á–µ–Ω",
        "–í–∞–∂–Ω–µ–µ —Ü–≤–µ—Ç, —Ñ–æ—Ä–º–∞ –≤—Ç–æ—Ä–∏—á–Ω–∞",
        "–í–∞–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç"
    ]
)

col1, col2 = st.columns(2)
with col1:
    skip = st.button("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –æ—Ç–≤–µ—Ç–∞")
with col2:
    submit = st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")

# -----------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
# -----------------------------
if submit or skip:
    if not text.strip() and not skip:
        st.error("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –æ—Ç–≤–µ—Ç–∞¬ª")
    else:
        if skip:
            text = ""
            is_animal, animal_conf = 0, 0.0
            label, label_conf = "skipped", 0.0
        else:
            is_animal, animal_conf = predict_is_animal(text)
            label, label_conf = predict_popular(text)

            st.success(
                f"–ù–µ–π—Ä–æ—Å–µ—Ç—å: {'–ñ–∏–≤–æ—Ç–Ω–æ–µ' if is_animal else '–ù–µ –∂–∏–≤–æ—Ç–Ω–æ–µ'} "
                f"(conf={animal_conf:.2f}) | "
                f"–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {label} (conf={label_conf:.2f})"
            )

        with open(RESULTS_CSV, "a", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow([
                st.session_state.username, slide, text,
                is_animal, f"{animal_conf:.3f}",
                label, f"{label_conf:.3f}",
                localization, int(movement), color_choice, int(form_clear)
            ])

        update_scores(is_animal, movement, color_choice, form_clear)

        # –°–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥
        st.session_state.slide += 1
        if st.session_state.slide > TOTAL_SLIDES:
            st.success("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")

            scores = calc_percentages()
            diagnosis = get_diagnosis(scores)

            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            st.write(f"–ñ–∏–≤–æ—Ç–Ω—ã–µ: {scores['animals']:.1f}%")
            st.write(f"–î–≤–∏–∂–µ–Ω–∏–µ: {scores['movement']:.1f}%")
            st.write(f"–¶–≤–µ—Ç: {scores['color']:.1f}%")
            st.write(f"–§–æ—Ä–º–∞: {scores['form']:.1f}%")

            st.subheader("üß† –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑:")
            st.info(diagnosis)

            st.session_state.slide = TOTAL_SLIDES
        else:
            time.sleep(2)
            st.rerun()
